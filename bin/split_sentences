#!/usr/bin/env perl

use strict;
use utf8;
use Encode;
use FindBin qw/$Bin/;
use lib "$Bin/../perllib/";
use FileHandle;
use File::Temp 'tempdir';
use IO::File;

binmode STDIN, ":encoding(utf8)";
binmode STDOUT, ":encoding(utf8)";
binmode STDERR, ":encoding(utf8)";

STDOUT->autoflush(1);

my $lang_source = $ARGV[0];
my $lang_target = $ARGV[1];

my $src = '';
while (<STDIN>) {
    $src .= "$_\n";
}

die "no input!" if ($src eq "");
 
my $tmpdir = tempdir;

# 文に分割
my $temp_file = "$tmpdir/in";
open(my $fh_out, ">:encoding(utf8)", $temp_file) or die "$temp_file: $!";
my @lines = split(/\n/, $src);
foreach my $line (@lines){
    if ($line ne ""){
        print $fh_out "$lang_source: $line\n" or die "writing $temp_file: $!";
    }
}
close($fh_out);

my @sentences = `perl -I perllib $Bin/sentence-splitter_ecj-utf8.perl < $temp_file`;
foreach my $s (@sentences) {
    $s = decode('utf8', $s);
    chomp $s;
    $s =~ s/^$lang_source: //;
    # $s =~ s/&/&amp;/sg;
    # $s =~ s/</&lt;/sg;
    # $s =~ s/>/&gt;/sg;
    # $s =~ s/"/&quot;/sg;
}

my $buf = "";
my @new_sentences = ();
my $threshold = 60;
foreach my $s (@sentences) {
    if (length($s) > $threshold) {
	push(@new_sentences, $buf) if ($buf ne "");
	$buf = "";

	# 細かく切る
	my @sent_small = ();
	while ($s =~ s/^(.+?(?:\,|\!|\;|\:|。|．|？|！|♪|…|；|：|，))//) {
	    push(@sent_small, $1);
	}
	push(@sent_small, $s) if ($s ne "");
	my $buf_small = "";
	foreach my $tmp (@sent_small) {
	    if ((length($buf_small) > 0 && $buf_small =~ /[^，、\,]$/) ||
		length($buf_small) + length($tmp) > $threshold) {
		push(@new_sentences, $buf_small);
		$buf_small = "";
	    }
	    $buf_small .= $tmp;
	}
	push(@new_sentences, $buf_small) if ($buf_small ne "");
    } elsif (length($buf) + length($s) > $threshold) {
	push(@new_sentences, $buf);
	$buf = $s;
    } else {
	$buf .= $s;
    }
}
push(@new_sentences, $buf) if ($buf ne "");
for (my $i = $#new_sentences; $i >= 0; $i--) {
    $new_sentences[$i] =~ s/^\s+//;
    $new_sentences[$i] =~ s/\s+$//;
    splice(@new_sentences, $i, 1) if ($new_sentences[$i] =~ /^\s*$/);
}
@sentences = @new_sentences;

# 文分割が失敗した場合
if (scalar(@sentences) == 0) {
    @sentences = @lines;
}

foreach my $sentence (@sentences) {
    print "$sentence\n";
}
